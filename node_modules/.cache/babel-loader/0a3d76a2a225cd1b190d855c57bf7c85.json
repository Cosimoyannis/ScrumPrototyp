{"ast":null,"code":"export default {\n  props: [\"jahr\", \"monat\", \"tag\", \"stunde\", \"minute\", \"sekunde\", \"millisekunde\"],\n  data: () => ({\n    displayDays: 0,\n    disyplayHours: 0,\n    displayMinutes: 0,\n    displaySecounds: 0\n  }),\n  computed: {\n    _secounds: () => 1000,\n    _minutes() {\n      return this._secounds * 60;\n    },\n    _hours() {\n      return this._minutes * 60;\n    },\n    _days() {\n      return this._hours * 24;\n    },\n    end() {\n      return new Date(this.jahr, this.monat, this.tag, this.stunde, this.minute, this.sekunde, this.millisekunde);\n    }\n  },\n  mounted() {\n    this.showReaming();\n  },\n  methods: {\n    formatNum: num => num < 10 ? \"0\" + num : num,\n    showReaming() {\n      const timer = setInterval(() => {\n        const now = new Date();\n        //const end = new Date(2022, 10, 30, 13, 0, 0);\n        const distance = this.end.getTime() - now.getTime();\n        if (distance < 0) {\n          clearInterval(timer);\n          return;\n        }\n        const days = Math.floor(distance / this._days);\n        const hours = Math.floor(distance % this._days / this._hours);\n        const minutes = Math.floor(distance % this._hours / this._minutes);\n        const secounds = Math.floor(distance % this._minutes / this._secounds);\n        this.displayMinutes = this.formatNum(minutes);\n        this.displaySecounds = this.formatNum(secounds);\n        this.disyplayHours = this.formatNum(hours);\n        this.displayDays = this.formatNum(days);\n      }, 1000);\n    }\n  }\n};","map":{"version":3,"mappings":"AAYA,eAAe;EACXA,KAAK,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,cAAc,CAAC;EAC9EC,IAAI,EAAE,OAAO;IACTC,WAAW,EAAE,CAAC;IACdC,aAAa,EAAE,CAAC;IAChBC,cAAc,EAAE,CAAC;IACjBC,eAAe,EAAE;EACrB,CAAC,CAAC;EACFC,QAAQ,EAAE;IACNC,SAAS,EAAE,MAAM,IAAI;IACrBC,QAAQ,GAAG;MACP,OAAO,IAAI,CAACD,SAAQ,GAAI,EAAE;IAC9B,CAAC;IACDE,MAAM,GAAG;MACL,OAAO,IAAI,CAACD,QAAO,GAAI,EAAE;IAC7B,CAAC;IACDE,KAAK,GAAG;MACJ,OAAO,IAAI,CAACD,MAAK,GAAI,EAAE;IAC3B,CAAC;IACDE,GAAG,GAAG;MACF,OAAO,IAAIC,IAAI,CACX,IAAI,CAACC,IAAI,EACT,IAAI,CAACC,KAAK,EACV,IAAI,CAACC,GAAG,EACR,IAAI,CAACC,MAAM,EACX,IAAI,CAACC,MAAM,EACX,IAAI,CAACC,OAAO,EACZ,IAAI,CAACC,YAAW,CACnB;IACL;EACJ,CAAC;EAAEC,OAAO,GAAG;IACT,IAAI,CAACC,WAAW,EAAC;EACrB,CAAC;EACDC,OAAO,EAAE;IACLC,SAAS,EAAEC,GAAE,IAAMA,GAAE,GAAI,EAAC,GAAI,GAAE,GAAIA,GAAE,GAAIA,GAAI;IAC9CH,WAAW,GAAE;MACT,MAAMI,KAAI,GAAIC,WAAW,CAAC,MAAK;QAC3B,MAAMC,GAAE,GAAI,IAAIf,IAAI,EAAE;QACtB;QACA,MAAMgB,QAAO,GAAI,IAAI,CAACjB,GAAG,CAACkB,OAAO,EAAC,GAAIF,GAAG,CAACE,OAAO,EAAE;QAEnD,IAAGD,QAAO,GAAI,CAAC,EAAC;UACZE,aAAa,CAACL,KAAK,CAAC;UACpB;QACJ;QAEA,MAAMM,IAAG,GAAIC,IAAI,CAACC,KAAK,CAAEL,QAAO,GAAI,IAAI,CAAClB,KAAK,CAAE;QAChD,MAAMwB,KAAI,GAAIF,IAAI,CAACC,KAAK,CAAEL,QAAO,GAAI,IAAI,CAAClB,KAAK,GAAI,IAAI,CAACD,MAAM,CAAC;QAC/D,MAAM0B,OAAM,GAAIH,IAAI,CAACC,KAAK,CAAEL,QAAO,GAAI,IAAI,CAACnB,MAAM,GAAI,IAAI,CAACD,QAAQ,CAAC;QACpE,MAAM4B,QAAO,GAAIJ,IAAI,CAACC,KAAK,CAAEL,QAAO,GAAI,IAAI,CAACpB,QAAQ,GAAI,IAAI,CAACD,SAAS,CAAC;QACxE,IAAI,CAACH,cAAa,GAAI,IAAI,CAACmB,SAAS,CAACY,OAAO;QAC5C,IAAI,CAAC9B,eAAc,GAAI,IAAI,CAACkB,SAAS,CAACa,QAAQ;QAC9C,IAAI,CAACjC,aAAY,GAAI,IAAI,CAACoB,SAAS,CAACW,KAAK;QACzC,IAAI,CAAChC,WAAU,GAAI,IAAI,CAACqB,SAAS,CAACQ,IAAI;MAC1C,CAAC,EAAE,IAAI,CAAC;IACZ;EACJ;AACJ","names":["props","data","displayDays","disyplayHours","displayMinutes","displaySecounds","computed","_secounds","_minutes","_hours","_days","end","Date","jahr","monat","tag","stunde","minute","sekunde","millisekunde","mounted","showReaming","methods","formatNum","num","timer","setInterval","now","distance","getTime","clearInterval","days","Math","floor","hours","minutes","secounds"],"sourceRoot":"","sources":["/Users/cosimo/Desktop/Prototyp_v4/src/components/ProjectTimer.vue"],"sourcesContent":["<template>\n    <div class=\"projecttimer\">\n        {{displayDays}}\n        {{disyplayHours}}\n        {{displayMinutes}} \n        {{displaySecounds}}\n    </div>\n    <br/>\n\n</template>\n\n<script>\nexport default {\n    props: [\"jahr\", \"monat\", \"tag\", \"stunde\", \"minute\", \"sekunde\", \"millisekunde\"],\n    data: () => ({\n        displayDays: 0,\n        disyplayHours: 0,\n        displayMinutes: 0,\n        displaySecounds: 0,\n    }),\n    computed: {\n        _secounds: () => 1000,\n        _minutes() {\n            return this._secounds * 60;\n        },\n        _hours() {\n            return this._minutes * 60;\n        },\n        _days() {\n            return this._hours * 24;\n        },        \n        end() {\n            return new Date(\n                this.jahr, \n                this.monat, \n                this.tag,\n                this.stunde, \n                this.minute, \n                this.sekunde,\n                this.millisekunde\n            );\n        },\n    }, mounted() {\n        this.showReaming()\n    },\n    methods: {\n        formatNum: num => (num < 10 ? \"0\" + num : num),\n        showReaming(){\n            const timer = setInterval(()=> {\n                const now = new Date();\n                //const end = new Date(2022, 10, 30, 13, 0, 0);\n                const distance = this.end.getTime() - now.getTime();\n\n                if(distance < 0){\n                    clearInterval(timer);\n                    return\n                }\n\n                const days = Math.floor((distance / this._days));\n                const hours = Math.floor((distance % this._days) / this._hours);\n                const minutes = Math.floor((distance % this._hours) / this._minutes);\n                const secounds = Math.floor((distance % this._minutes) / this._secounds);\n                this.displayMinutes = this.formatNum(minutes)\n                this.displaySecounds = this.formatNum(secounds)\n                this.disyplayHours = this.formatNum(hours)\n                this.displayDays = this.formatNum(days)\n            }, 1000);\n        },\n    }\n}\n</script>\n\n<style scoped>\n.projecttimer{\n    justify-content: center;\n}\n</style>"]},"metadata":{},"sourceType":"module"}