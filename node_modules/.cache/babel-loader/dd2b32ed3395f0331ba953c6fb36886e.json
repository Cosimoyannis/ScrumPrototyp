{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-f3e29c48\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"projecttimer\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, _toDisplayString(_ctx.displayDays) + \" \" + _toDisplayString(_ctx.disyplayHours) + \" \" + _toDisplayString(_ctx.displayMinutes) + \" \" + _toDisplayString(_ctx.displaySecounds), 1 /* TEXT */), _hoisted_2], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;;EACSA,KAAK,EAAC;AAAc;gEAMzBC,oBAAK;;;6DANLA,oBAKM,OALNC,UAKM,mBAJAC,gBAAW,IAAE,GACf,oBAAEA,kBAAa,IAAE,GACjB,oBAAEA,mBAAc,IAAE,GAClB,oBAAEA,oBAAe,kBAErBC,UAAK","names":["class","_createElementVNode","_hoisted_1","_ctx","_hoisted_2"],"sourceRoot":"","sources":["C:\\Users\\meteh\\OneDrive\\Dokumente\\HTW Wirtschaftsinformatik\\Softwarergonomie\\ScrumPrototyp\\src\\components\\ProjectTimer.vue"],"sourcesContent":["<template>\r\n    <div class=\"projecttimer\">\r\n        {{displayDays}}\r\n        {{disyplayHours}}\r\n        {{displayMinutes}} \r\n        {{displaySecounds}}\r\n    </div>\r\n    <br/>\r\n\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    props: [\"jahr\", \"monat\", \"tag\", \"stunde\", \"minute\", \"sekunde\", \"millisekunde\"],\r\n    data: () => ({\r\n        displayDays: 0,\r\n        disyplayHours: 0,\r\n        displayMinutes: 0,\r\n        displaySecounds: 0,\r\n    }),\r\n    computed: {\r\n        _secounds: () => 1000,\r\n        _minutes() {\r\n            return this._secounds * 60;\r\n        },\r\n        _hours() {\r\n            return this._minutes * 60;\r\n        },\r\n        _days() {\r\n            return this._hours * 24;\r\n        },        \r\n        end() {\r\n            return new Date(\r\n                this.jahr, \r\n                this.monat, \r\n                this.tag,\r\n                this.stunde, \r\n                this.minute, \r\n                this.sekunde,\r\n                this.millisekunde\r\n            );\r\n        },\r\n    }, mounted() {\r\n        this.showReaming()\r\n    },\r\n    methods: {\r\n        formatNum: num => (num < 10 ? \"0\" + num : num),\r\n        showReaming(){\r\n            const timer = setInterval(()=> {\r\n                const now = new Date();\r\n                //const end = new Date(2022, 10, 30, 13, 0, 0);\r\n                const distance = this.end.getTime() - now.getTime();\r\n\r\n                if(distance < 0){\r\n                    clearInterval(timer);\r\n                    return\r\n                }\r\n\r\n                const days = Math.floor((distance / this._days));\r\n                const hours = Math.floor((distance % this._days) / this._hours);\r\n                const minutes = Math.floor((distance % this._hours) / this._minutes);\r\n                const secounds = Math.floor((distance % this._minutes) / this._secounds);\r\n                this.displayMinutes = this.formatNum(minutes)\r\n                this.displaySecounds = this.formatNum(secounds)\r\n                this.disyplayHours = this.formatNum(hours)\r\n                this.displayDays = this.formatNum(days)\r\n            }, 1000);\r\n        },\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.projecttimer{\r\n    justify-content: center;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}