{"ast":null,"code":"export default {\n  props: [\"jahr\", \"monat\", \"tag\", \"stunde\", \"minute\", \"sekunde\"],\n  data: () => ({\n    displayDays: 0,\n    disyplayHours: 0,\n    displayMinutes: 0,\n    displaySecounds: 0,\n    inputHours: null,\n    inputMinutes: null,\n    inputSeconds: null\n  }),\n  computed: {\n    _secounds: () => 1000,\n    _minutes() {\n      return this._secounds * 60;\n    },\n    _hours() {\n      return this._minutes * 60;\n    },\n    _days() {\n      return this._hours * 24;\n    },\n    end() {\n      return new Date(this.jahr, this.monat, this.tag, this.stunde, this.minute, this.sekunde);\n    }\n  },\n  mounted() {\n    //this.showReaming()\n  },\n  methods: {\n    formatNum: num => num < 10 ? \"0\" + num : num,\n    showReaming(Hours, Minutes, Seconds) {\n      const timer = setInterval(() => {\n        const now = new Date();\n        const end = new Date(2022, 9, 30, Hours, Minutes, Seconds);\n        const distance = end.getTime() - now.getTime();\n        if (distance < 0) {\n          clearInterval(timer);\n          return;\n        }\n        const days = Math.floor(distance / this._days);\n        const hours = Math.floor(distance % this._days / this._hours);\n        const minutes = Math.floor(distance % this._hours / this._minutes);\n        const secounds = Math.floor(distance % this._minutes / this._secounds);\n        this.displayMinutes = this.formatNum(minutes);\n        this.displaySecounds = this.formatNum(secounds);\n        this.disyplayHours = this.formatNum(hours);\n        this.displayDays = this.formatNum(days);\n      }, 1000);\n    },\n    getInput() {\n      //Clear Timer - muss noch implementiert werden (sonst springt der Timer immer zwischen alter und neuer Zeit)\n      //Start Timer\n      this.showReaming(this.inputHours, this.inputMinutes, this.inputSeconds);\n    }\n  }\n};","map":{"version":3,"mappings":"AA+BA,eAAe;EACXA,KAAK,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,CAAC;EAC9DC,IAAI,EAAE,OAAO;IACTC,WAAW,EAAE,CAAC;IACdC,aAAa,EAAE,CAAC;IAChBC,cAAc,EAAE,CAAC;IACjBC,eAAe,EAAE,CAAC;IAClBC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE,IAAI;IAClBC,YAAY,EAAE;EAElB,CAAC,CAAC;EACFC,QAAQ,EAAE;IACNC,SAAS,EAAE,MAAM,IAAI;IACrBC,QAAQ,GAAG;MACP,OAAO,IAAI,CAACD,SAAQ,GAAI,EAAE;IAC9B,CAAC;IACDE,MAAM,GAAG;MACL,OAAO,IAAI,CAACD,QAAO,GAAI,EAAE;IAC7B,CAAC;IACDE,KAAK,GAAG;MACJ,OAAO,IAAI,CAACD,MAAK,GAAI,EAAE;IAC3B,CAAC;IACDE,GAAG,GAAG;MACF,OAAO,IAAIC,IAAI,CACX,IAAI,CAACC,IAAI,EAAE,IAAI,CAACC,KAAK,EAAE,IAAI,CAACC,GAAG,EAAE,IAAI,CAACC,MAAM,EAAE,IAAI,CAACC,MAAM,EAAE,IAAI,CAACC,OAAM,CACzE;IACL;EACJ,CAAC;EAAEC,OAAO,GAAG;IACT;EACJ,CAAC;EACDC,OAAO,EAAE;IACLC,SAAS,EAAEC,GAAE,IAAMA,GAAE,GAAI,EAAC,GAAI,GAAE,GAAIA,GAAE,GAAIA,GAAI;IAC9CC,WAAW,CAACC,KAAK,EAAEC,OAAO,EAAEC,OAAO,EAAC;MAChC,MAAMC,KAAI,GAAIC,WAAW,CAAC,MAAK;QAC3B,MAAMC,GAAE,GAAI,IAAIjB,IAAI,EAAE;QACtB,MAAMD,GAAE,GAAI,IAAIC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,EAAEY,KAAK,EAAEC,OAAO,EAAEC,OAAO,CAAC;QAC1D,MAAMI,QAAO,GAAInB,GAAG,CAACoB,OAAO,EAAC,GAAIF,GAAG,CAACE,OAAO,EAAE;QAG9C,IAAGD,QAAO,GAAI,CAAC,EAAC;UACZE,aAAa,CAACL,KAAK,CAAC;UACpB;QACJ;QAEA,MAAMM,IAAG,GAAIC,IAAI,CAACC,KAAK,CAAEL,QAAO,GAAI,IAAI,CAACpB,KAAK,CAAE;QAChD,MAAM0B,KAAI,GAAIF,IAAI,CAACC,KAAK,CAAEL,QAAO,GAAI,IAAI,CAACpB,KAAK,GAAI,IAAI,CAACD,MAAM,CAAC;QAC/D,MAAM4B,OAAM,GAAIH,IAAI,CAACC,KAAK,CAAEL,QAAO,GAAI,IAAI,CAACrB,MAAM,GAAI,IAAI,CAACD,QAAQ,CAAC;QACpE,MAAM8B,QAAO,GAAIJ,IAAI,CAACC,KAAK,CAAEL,QAAO,GAAI,IAAI,CAACtB,QAAQ,GAAI,IAAI,CAACD,SAAS,CAAC;QACxE,IAAI,CAACN,cAAa,GAAI,IAAI,CAACoB,SAAS,CAACgB,OAAO;QAC5C,IAAI,CAACnC,eAAc,GAAI,IAAI,CAACmB,SAAS,CAACiB,QAAQ;QAC9C,IAAI,CAACtC,aAAY,GAAI,IAAI,CAACqB,SAAS,CAACe,KAAK;QACzC,IAAI,CAACrC,WAAU,GAAI,IAAI,CAACsB,SAAS,CAACY,IAAI;MAC1C,CAAC,EAAE,IAAI,CAAC;IACZ,CAAC;IACDM,QAAQ,GAAE;MACN;MACA;MACA,IAAI,CAAChB,WAAW,CAAC,IAAI,CAACpB,UAAU,EAAE,IAAI,CAACC,YAAY,EAAE,IAAI,CAACC,YAAY;IAC1E;EACJ;AACJ","names":["props","data","displayDays","disyplayHours","displayMinutes","displaySecounds","inputHours","inputMinutes","inputSeconds","computed","_secounds","_minutes","_hours","_days","end","Date","jahr","monat","tag","stunde","minute","sekunde","mounted","methods","formatNum","num","showReaming","Hours","Minutes","Seconds","timer","setInterval","now","distance","getTime","clearInterval","days","Math","floor","hours","minutes","secounds","getInput"],"sourceRoot":"","sources":["C:\\Users\\meteh\\OneDrive\\Dokumente\\HTW Wirtschaftsinformatik\\Softwarergonomie\\ScrumPrototyp\\src\\components\\TheTimer.vue"],"sourcesContent":["<template>\r\n    <div class=\"countdown\">\r\n        {{displayDays}} :\r\n       {{disyplayHours}} :\r\n       {{displayMinutes}} :\r\n       {{displaySecounds}}\r\n    </div>\r\n    <br/>\r\n    <div class=\"form\">\r\n        Zu welcher Uhrzeit soll der Timer enden?\r\n        <br/>\r\n        <input class=\"input\" type=\"number\" placeholder=\"Stunden\" v-model=\"inputHours\"/>\r\n        <input class=\"input\" type=\"number\" placeholder=\"Minuten\" v-model=\"inputMinutes\"/>\r\n        <input class=\"input\" type=\"number\" placeholder=\"Sekunden\" v-model=\"inputSeconds\"/>\r\n        <button class=\"btnTimer\" type=\"button\" v-on:click=\"getInput()\" >Start</button>\r\n        <button class=\"btnTimer\" type=\"button\"  >Stopp</button>\r\n    </div>\r\n\r\n    <div>Infos / Bugs:\r\n        ist der timer gestartet und der user startet anschließend eine neuen timer, dann springt die zeit immer hin und her (beide timer laufen).\r\n            <br/>\r\n        <br/>\r\n        todo:    <br/>\r\n        - bug (zeit springen beheben)    <br/>\r\n        - stopp button implementieren    <br/>\r\n        - timer eingabe eventuell überdenken (nicht uhrzeit als ende des times eingeben, sondern timer soll in 30 minuten enden...)    <br/>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    props: [\"jahr\", \"monat\", \"tag\", \"stunde\", \"minute\", \"sekunde\"],\r\n    data: () => ({\r\n        displayDays: 0,\r\n        disyplayHours: 0,\r\n        displayMinutes: 0,\r\n        displaySecounds: 0,\r\n        inputHours: null,\r\n        inputMinutes: null,\r\n        inputSeconds: null,\r\n\r\n    }),\r\n    computed: {\r\n        _secounds: () => 1000,\r\n        _minutes() {\r\n            return this._secounds * 60;\r\n        },\r\n        _hours() {\r\n            return this._minutes * 60;\r\n        },\r\n        _days() {\r\n            return this._hours * 24;\r\n        },\r\n        end() {\r\n            return new Date(\r\n                this.jahr, this.monat, this.tag, this.stunde, this.minute, this.sekunde\r\n            );\r\n        },\r\n    }, mounted() {\r\n        //this.showReaming()\r\n    },\r\n    methods: {\r\n        formatNum: num => (num < 10 ? \"0\" + num : num),\r\n        showReaming(Hours, Minutes, Seconds){\r\n            const timer = setInterval(()=> {\r\n                const now = new Date();\r\n                const end = new Date(2022, 9, 30, Hours, Minutes, Seconds);\r\n                const distance = end.getTime() - now.getTime();\r\n\r\n                \r\n                if(distance < 0){\r\n                    clearInterval(timer);\r\n                    return\r\n                }\r\n\r\n                const days = Math.floor((distance / this._days));\r\n                const hours = Math.floor((distance % this._days) / this._hours);\r\n                const minutes = Math.floor((distance % this._hours) / this._minutes);\r\n                const secounds = Math.floor((distance % this._minutes) / this._secounds);\r\n                this.displayMinutes = this.formatNum(minutes)\r\n                this.displaySecounds = this.formatNum(secounds)\r\n                this.disyplayHours = this.formatNum(hours)\r\n                this.displayDays = this.formatNum(days)\r\n            }, 1000);\r\n        },\r\n        getInput(){\r\n            //Clear Timer - muss noch implementiert werden (sonst springt der Timer immer zwischen alter und neuer Zeit)\r\n            //Start Timer\r\n            this.showReaming(this.inputHours, this.inputMinutes, this.inputSeconds)\r\n        },\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n.form {\r\n    position: relative;\r\n    text-align: center;\r\n}\r\n.countdown {\r\n    background-color: #C5A974;\r\n    position: relative;\r\n    text-align: center;\r\n    height: 15vh;\r\n    width: 15vh;\r\n    border-radius: 100px;\r\n    margin-left: 40%;\r\n    padding-top: 50px;\r\n}\r\n.input {\r\n    height: 25px;\r\n    width: 100px;\r\n    margin: 3px;\r\n    border: none;\r\n    background-color: #e7e7e7;\r\n    color: black;\r\n}\r\n.btnTimer {\r\n  background-color: rgb(37, 32, 32);\r\n  color: white;\r\n  border: solid 1px white;\r\n  cursor: pointer;\r\n  padding: 10px;\r\n  width: 60px;\r\n  border-radius: 4px;\r\n}\r\n.btnTimer:hover {\r\n  border: solid 1px white;\r\n  background-color: rgb(48, 170, 222);\r\n  letter-spacing: 2px;\r\n  border-radius: 10px;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}