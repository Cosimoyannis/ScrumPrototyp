{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-f3e29c48\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"projecttimer\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, _toDisplayString(_ctx.displayDays) + \" \" + _toDisplayString(_ctx.disyplayHours) + \" \" + _toDisplayString(_ctx.displayMinutes) + \" \" + _toDisplayString(_ctx.displaySecounds), 1 /* TEXT */), _hoisted_2], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;;EACSA,KAAK,EAAC;AAAc;gEAMzBC,oBAAK;;;6DANLA,oBAKM,OALNC,UAKM,mBAJAC,gBAAW,IAAE,GACf,oBAAEA,kBAAa,IAAE,GACjB,oBAAEA,mBAAc,IAAE,GAClB,oBAAEA,oBAAe,kBAErBC,UAAK","names":["class","_createElementVNode","_hoisted_1","_ctx","_hoisted_2"],"sourceRoot":"","sources":["/Users/john-simonbachhuber/Studium/6 Semester/Softwareergonomie/ScrumPrototyp/src/components/ProjectTimer.vue"],"sourcesContent":["<template>\n    <div class=\"projecttimer\">\n        {{displayDays}}\n        {{disyplayHours}}\n        {{displayMinutes}} \n        {{displaySecounds}}\n    </div>\n    <br/>\n\n</template>\n\n<script>\nexport default {\n    props: [\"jahr\", \"monat\", \"tag\", \"stunde\", \"minute\", \"sekunde\", \"millisekunde\"],\n    data: () => ({\n        displayDays: 0,\n        disyplayHours: 0,\n        displayMinutes: 0,\n        displaySecounds: 0,\n    }),\n    computed: {\n        _secounds: () => 1000,\n        _minutes() {\n            return this._secounds * 60;\n        },\n        _hours() {\n            return this._minutes * 60;\n        },\n        _days() {\n            return this._hours * 24;\n        },        \n        end() {\n            return new Date(\n                this.jahr, \n                this.monat, \n                this.tag,\n                this.stunde, \n                this.minute, \n                this.sekunde,\n                this.millisekunde\n            );\n        },\n    }, mounted() {\n        this.showReaming()\n    },\n    methods: {\n        formatNum: num => (num < 10 ? \"0\" + num : num),\n        showReaming(){\n            const timer = setInterval(()=> {\n                const now = new Date();\n                //const end = new Date(2022, 10, 30, 13, 0, 0);\n                const distance = this.end.getTime() - now.getTime();\n\n                if(distance < 0){\n                    clearInterval(timer);\n                    return\n                }\n\n                const days = Math.floor((distance / this._days));\n                const hours = Math.floor((distance % this._days) / this._hours);\n                const minutes = Math.floor((distance % this._hours) / this._minutes);\n                const secounds = Math.floor((distance % this._minutes) / this._secounds);\n                this.displayMinutes = this.formatNum(minutes)\n                this.displaySecounds = this.formatNum(secounds)\n                this.disyplayHours = this.formatNum(hours)\n                this.displayDays = this.formatNum(days)\n            }, 1000);\n        },\n    }\n}\n</script>\n\n<style scoped>\n.projecttimer{\n    justify-content: center;\n}\n</style>"]},"metadata":{},"sourceType":"module"}