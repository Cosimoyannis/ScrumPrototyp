{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, createTextVNode as _createTextVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"countdown\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_3 = {\n  class: \"form\"\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"btnTimer\",\n  type: \"button\"\n}, \"Stopp\", -1 /* HOISTED */);\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"div\", null, [/*#__PURE__*/_createTextVNode(\"Infos / Bugs: ist der timer gestartet und der user startet anschließend eine neuen timer, dann springt die zeit immer hin und her (beide timer laufen). \"), /*#__PURE__*/_createElementVNode(\"br\"), /*#__PURE__*/_createElementVNode(\"br\"), /*#__PURE__*/_createTextVNode(\" todo: \"), /*#__PURE__*/_createElementVNode(\"br\"), /*#__PURE__*/_createTextVNode(\" - bug (zeit springen beheben) \"), /*#__PURE__*/_createElementVNode(\"br\"), /*#__PURE__*/_createTextVNode(\" - stopp button implementieren \"), /*#__PURE__*/_createElementVNode(\"br\"), /*#__PURE__*/_createTextVNode(\" - timer eingabe eventuell überdenken (nicht uhrzeit als ende des times eingeben, sondern timer soll in 30 minuten enden...) \"), /*#__PURE__*/_createElementVNode(\"br\")], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, _toDisplayString(_ctx.displayDays) + \" : \" + _toDisplayString(_ctx.disyplayHours) + \" : \" + _toDisplayString(_ctx.displayMinutes) + \" : \" + _toDisplayString(_ctx.displaySecounds), 1 /* TEXT */), _hoisted_2, _createElementVNode(\"div\", _hoisted_3, [_createTextVNode(\" Zu welcher Uhrzeit soll der Timer enden? \"), _hoisted_4, _withDirectives(_createElementVNode(\"input\", {\n    class: \"input\",\n    type: \"number\",\n    placeholder: \"Stunden\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.inputHours = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.inputHours]]), _withDirectives(_createElementVNode(\"input\", {\n    class: \"input\",\n    type: \"number\",\n    placeholder: \"Minuten\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.inputMinutes = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.inputMinutes]]), _withDirectives(_createElementVNode(\"input\", {\n    class: \"input\",\n    type: \"number\",\n    placeholder: \"Sekunden\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.inputSeconds = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.inputSeconds]]), _createElementVNode(\"button\", {\n    class: \"btnTimer\",\n    type: \"button\",\n    onClick: _cache[3] || (_cache[3] = $event => $options.getInput())\n  }, \"Start\"), _hoisted_5]), _hoisted_6], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;EACSA,KAAK,EAAC;AAAW;gCAMtBC,oBAAK;;EACAD,KAAK,EAAC;AAAM;gCAEbC,oBAAK;gCAKLA,oBAAuD;EAA/CD,KAAK,EAAC,UAAU;EAACE,IAAI,EAAC;GAAW,OAAK;gCAGlDD,oBAQM,4CARD,0JAEG,oCAAK,oBACTA,oBAAK,8CACI,oCAAK,sEACmB,oCAAK,sEACL,oCAAK,oKACyF,oCAAK;;;6DAxBxIA,oBAKM,OALNE,UAKM,mBAJAC,gBAAW,IAAE,KAChB,oBAAEA,kBAAa,IAAE,KACjB,oBAAEA,mBAAc,IAAE,KAClB,oBAAEA,oBAAe,kBAEpBC,UAAK,EACLJ,oBAQM,OARNK,UAQM,oBARY,4CAEd,aAAK,kBACLL,oBAA+E;IAAxED,KAAK,EAAC,OAAO;IAACE,IAAI,EAAC,QAAQ;IAACK,WAAW,EAAC,SAAS;+DAAUH,eAAU;iDAAVA,eAAU,qBAC5EH,oBAAiF;IAA1ED,KAAK,EAAC,OAAO;IAACE,IAAI,EAAC,QAAQ;IAACK,WAAW,EAAC,SAAS;+DAAUH,iBAAY;iDAAZA,iBAAY,qBAC9EH,oBAAkF;IAA3ED,KAAK,EAAC,OAAO;IAACE,IAAI,EAAC,QAAQ;IAACK,WAAW,EAAC,UAAU;+DAAUH,iBAAY;iDAAZA,iBAAY,KAC/EH,oBAA8E;IAAtED,KAAK,EAAC,UAAU;IAACE,IAAI,EAAC,QAAQ;IAAMM,OAAK,sCAAEC,iBAAQ;KAAK,OAAK,GACrEC,UAAuD,IAG3DC,UAQM","names":["class","_createElementVNode","type","_hoisted_1","_ctx","_hoisted_2","_hoisted_3","placeholder","onClick","$options","_hoisted_5","_hoisted_6"],"sourceRoot":"","sources":["/Users/cosimo/Desktop/Prototyp_v4/src/components/TheTimer.vue"],"sourcesContent":["<template>\r\n    <div class=\"countdown\">\r\n        {{displayDays}} :\r\n       {{disyplayHours}} :\r\n       {{displayMinutes}} :\r\n       {{displaySecounds}}\r\n    </div>\r\n    <br/>\r\n    <div class=\"form\">\r\n        Zu welcher Uhrzeit soll der Timer enden?\r\n        <br/>\r\n        <input class=\"input\" type=\"number\" placeholder=\"Stunden\" v-model=\"inputHours\"/>\r\n        <input class=\"input\" type=\"number\" placeholder=\"Minuten\" v-model=\"inputMinutes\"/>\r\n        <input class=\"input\" type=\"number\" placeholder=\"Sekunden\" v-model=\"inputSeconds\"/>\r\n        <button class=\"btnTimer\" type=\"button\" v-on:click=\"getInput()\" >Start</button>\r\n        <button class=\"btnTimer\" type=\"button\"  >Stopp</button>\r\n    </div>\r\n\r\n    <div>Infos / Bugs:\r\n        ist der timer gestartet und der user startet anschließend eine neuen timer, dann springt die zeit immer hin und her (beide timer laufen).\r\n            <br/>\r\n        <br/>\r\n        todo:    <br/>\r\n        - bug (zeit springen beheben)    <br/>\r\n        - stopp button implementieren    <br/>\r\n        - timer eingabe eventuell überdenken (nicht uhrzeit als ende des times eingeben, sondern timer soll in 30 minuten enden...)    <br/>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    props: [\"jahr\", \"monat\", \"tag\", \"stunde\", \"minute\", \"sekunde\"],\r\n    data: () => ({\r\n        displayDays: 0,\r\n        disyplayHours: 0,\r\n        displayMinutes: 0,\r\n        displaySecounds: 0,\r\n        inputHours: null,\r\n        inputMinutes: null,\r\n        inputSeconds: null,\r\n\r\n    }),\r\n    computed: {\r\n        _secounds: () => 1000,\r\n        _minutes() {\r\n            return this._secounds * 60;\r\n        },\r\n        _hours() {\r\n            return this._minutes * 60;\r\n        },\r\n        _days() {\r\n            return this._hours * 24;\r\n        },\r\n        end() {\r\n            return new Date(\r\n                this.jahr, this.monat, this.tag, this.stunde, this.minute, this.sekunde\r\n            );\r\n        },\r\n    }, mounted() {\r\n        //this.showReaming()\r\n    },\r\n    methods: {\r\n        formatNum: num => (num < 10 ? \"0\" + num : num),\r\n        showReaming(Hours, Minutes, Seconds){\r\n            const timer = setInterval(()=> {\r\n                const now = new Date();\r\n                const end = new Date(2022, 9, 30, Hours, Minutes, Seconds);\r\n                const distance = end.getTime() - now.getTime();\r\n\r\n                \r\n                if(distance < 0){\r\n                    clearInterval(timer);\r\n                    return\r\n                }\r\n\r\n                const days = Math.floor((distance / this._days));\r\n                const hours = Math.floor((distance % this._days) / this._hours);\r\n                const minutes = Math.floor((distance % this._hours) / this._minutes);\r\n                const secounds = Math.floor((distance % this._minutes) / this._secounds);\r\n                this.displayMinutes = this.formatNum(minutes)\r\n                this.displaySecounds = this.formatNum(secounds)\r\n                this.disyplayHours = this.formatNum(hours)\r\n                this.displayDays = this.formatNum(days)\r\n            }, 1000);\r\n        },\r\n        getInput(){\r\n            //Clear Timer - muss noch implementiert werden (sonst springt der Timer immer zwischen alter und neuer Zeit)\r\n            //Start Timer\r\n            this.showReaming(this.inputHours, this.inputMinutes, this.inputSeconds)\r\n        },\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n.form {\r\n    position: relative;\r\n    text-align: center;\r\n}\r\n.countdown {\r\n    background-color: #C5A974;\r\n    position: relative;\r\n    text-align: center;\r\n    height: 15vh;\r\n    width: 15vh;\r\n    border-radius: 100px;\r\n    margin-left: 40%;\r\n    padding-top: 50px;\r\n}\r\n.input {\r\n    height: 25px;\r\n    width: 100px;\r\n    margin: 3px;\r\n    border: none;\r\n    background-color: #e7e7e7;\r\n    color: black;\r\n}\r\n.btnTimer {\r\n  background-color: rgb(37, 32, 32);\r\n  color: white;\r\n  border: solid 1px white;\r\n  cursor: pointer;\r\n  padding: 10px;\r\n  width: 60px;\r\n  border-radius: 4px;\r\n}\r\n.btnTimer:hover {\r\n  border: solid 1px white;\r\n  background-color: rgb(48, 170, 222);\r\n  letter-spacing: 2px;\r\n  border-radius: 10px;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}